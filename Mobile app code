%
from fastapi import FastAPI, File, UploadFile
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse
import base64
import numpy as np
import cv2
from tensorflow.keras.models import load_model

app = FastAPI()

# Load the model
model = load_model('D:\lab1\FYP1_best_val_acc.h5')

# Define class names
class_names = {0: 'Normal', 1: 'Doubtful', 2: 'Mild', 3: 'Moderate', 4: 'Severe'}

# Define a function to preprocess the image
def preprocess_image(image):
    # Your preprocessing steps here
    return image

# Define an endpoint for prediction
import cv2

"""@app.post("/predict")
async def predict(file: UploadFile = File(...)):
    
    try:
        print("Hi")
        # Read and preprocess image
        contents = await file.read()
        nparr = np.frombuffer(contents, np.uint8)
        img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        # Resize image to the correct dimensions
        img = cv2.resize(img, (200, 200))
        
        # Add a dimension to match the model's input shape
        img_array = np.expand_dims(img, axis=0)

        # Duplicate the input for models expecting two inputs
        img_array = [img_array, img_array]

        # Make prediction
        prediction = model.predict(img_array)
        predicted_class = int(np.argmax(prediction))
        predicted_label = class_names[predicted_class]

        return JSONResponse(content={"predicted_class": predicted_class, "predicted_label": predicted_label})
    except Exception as e:
        return JSONResponse(content={"error": str(e)})
"""

@app.post("/predict")
async def predict(request: Request):
    try:
        body = await request.body()
        
        # Decode the Base64 encoded image data
        image_bytes = base64.b64decode(body)
        
        # Convert the bytes to a numpy array
        nparr = np.frombuffer(image_bytes, np.uint8)
        
        # Decode the image using OpenCV
        img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        if img is None or img.size == 0:
            raise ValueError("Invalid image data")
        
        # Resize image to the correct dimensions
        img = cv2.resize(img, (200, 200))
        
        # Add a dimension to match the model's input shape
        img_array = np.expand_dims(img, axis=0)

        # Duplicate the input for models expecting two inputs
        img_array = [img_array, img_array]

        # Make prediction (assuming 'model' and 'class_names' are defined elsewhere)
        prediction = model.predict(img_array)
        predicted_class = int(np.argmax(prediction))
        predicted_label = class_names[predicted_class]

        return JSONResponse(content={"predicted_class": predicted_class, "predicted_label": predicted_label})
    except Exception as e:
        return JSONResponse(content={"error": str(e)}) 


# CORS middleware configuration
origins = [
    "http://127.0.0.1:5500",
    "http://192.168.100.4:56694",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["POST"],
    allow_headers=["*"],
)
